import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  FiRefreshCw, FiTrendingUp, FiTrendingDown,
  FiDollarSign, FiBarChart2, FiCreditCard, FiGift,
  FiMaximize2, FiTrash2
} from "react-icons/fi";
import { useToast } from "../context/ToastContext";
import { useAuth } from "../context/AuthContext";
import { useVirtualMoney } from "../context/VirtualMoneyContext";
import { safeApiCall, createDummyData } from "../utils/apiUtils";
import { getCachedStockSymbols, cacheStockSymbols } from "../utils/stockCache";
import PageLayout from "../components/PageLayout";
import Loading from "../components/Loading";
import FullScreenStockDetail from "../components/FullScreenStockDetail";
import StockSearch from "../components/StockSearch";
import axios from "axios";
import API_ENDPOINTS from "../config/apiConfig";
import "./portfolio.css";

// Add some additional styles for the clickable rows
const additionalStyles = `
  .stock-row {
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .stock-row:hover {
    background-color: rgba(34, 184, 176, 0.05) !important;
  }

  .view-detail-btn {
    background-color: rgba(34, 184, 176, 0.1);
    color: #22b8b0;
    border: none;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-left: 8px;
  }

  .view-detail-btn:hover {
    background-color: rgba(34, 184, 176, 0.2);
    transform: scale(1.1);
  }

  .pl-container {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 8px;
  }
`;

const mockPortfolio = [
  {
    symbol: "TCS",
    company: "Tata Consultancy Services",
    quantity: 10,
    buyPrice: 3300,
    currentPrice: 3450,
  },
  {
    symbol: "INFY",
    company: "Infosys Ltd",
    quantity: 15,
    buyPrice: 1400,
    currentPrice: 1350,
  },
];

const PortfolioPage = () => {
  const toast = useToast();
  const { isAuthenticated, user } = useAuth();
  const { virtualMoney, fetchVirtualMoney, updateVirtualMoney } = useVirtualMoney();
  const [portfolio, setPortfolio] = useState(mockPortfolio);
  const [showModal, setShowModal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showRewardAnimation, setShowRewardAnimation] = useState(false);
  const [newStock, setNewStock] = useState({
    symbol: "",
    company: "",
    quantity: "",
    buyPrice: "",
    currentPrice: "",
  });
  const [errors, setErrors] = useState({});
  const [selectedStock, setSelectedStock] = useState(null);
  const [showFullScreenDetail, setShowFullScreenDetail] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [stockSymbols, setStockSymbols] = useState([]);

  // Calculate total investment, current value, and profit/loss
  const totalInvestment = portfolio.reduce(
    (total, stock) => total + stock.buyPrice * stock.quantity,
    0
  );

  const totalValue = portfolio.reduce(
    (total, stock) => total + stock.currentPrice * stock.quantity,
    0
  );

  const profitLoss = totalValue - totalInvestment;

  // Reset portfolio function
  const resetPortfolio = async () => {
    if (confirm("Are you sure you want to reset your portfolio?")) {
      try {
        // Call API to reset portfolio
        try {
          const response = await axios.delete(API_ENDPOINTS.VIRTUAL_MONEY.PORTFOLIO);

          if (response.data.success) {
            // Update virtual money and portfolio
            fetchVirtualMoneyData();
            toast.success(response.data.message || "Portfolio has been reset successfully");
          }
        } catch (apiError) {
          console.log("Backend API not available, using local implementation", apiError);

          // Local implementation
          const updatedVirtualMoney = {
            ...virtualMoney,
            portfolio: []
          };

          updateVirtualMoney(updatedVirtualMoney);
          setPortfolio([]);
          localStorage.setItem('virtualMoney', JSON.stringify(updatedVirtualMoney));

          toast.info("Portfolio has been reset");
        }
      } catch (err) {
        console.error("Error resetting portfolio:", err);
        toast.error("Failed to reset portfolio. Please try again.");
      }
    }
  };

  // Rest of the component code...
  
  return (
    <PageLayout>
      {/* Component JSX */}
    </PageLayout>
  );
};

export default PortfolioPage;
